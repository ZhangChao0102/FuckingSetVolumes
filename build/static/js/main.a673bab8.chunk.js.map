{"version":3,"sources":["components/KeepClick.tsx","components/Cursor.tsx","components/Hello.tsx","constants/index.tsx","actions/index.tsx","containers/Hello.tsx","serviceWorker.ts","index.tsx","reducers/index.tsx"],"names":["KeepClick","number","props","state","timer","addVolume","volume","setState","lessVolume","setTimeout","this","clearTimeout","className","style","width","height","border","background","onClick","React","Component","Cursor","move","el","findDOMNode","current","left","parseInt","window","getComputedStyle","console","log","createRef","transform","ref","borderColor","getExclamationMarks","Array","join","Hello","name","enthusiasmLevel","onDecrease","onIncrease","Error","INCREMENT_ENTHUSIASM","DECREMENT_ENTHUSIASM","incrementEnthusiasm","type","constants","decrementEnthusiasm","connect","languageName","dispatch","actions","Boolean","location","hostname","match","store","createStore","action","composeWithDevTools","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a673bab8.chunk.js","sourcesContent":["import React from \"react\";\r\nimport {number} from \"prop-types\";\r\n\r\nconst interface1 = {\r\n    volume: number\r\n};\r\n\r\nclass KeepClick extends React.Component {\r\n    state: any;\r\n    timer: any;\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            volume: 0\r\n        };\r\n        this.timer = null;\r\n    }\r\n\r\n    addVolume = () => {\r\n        let {volume} = this.state;\r\n        this.setState({\r\n            volume: volume + 10 > 100 ? 100 : volume + 10\r\n        })\r\n    };\r\n\r\n    lessVolume = () => {\r\n        let {volume} = this.state;\r\n        if (volume > 0) {\r\n            this.setState({\r\n                volume: volume - 1\r\n            })\r\n        }\r\n\r\n        this.timer = setTimeout(() => {\r\n            this.lessVolume();\r\n        }, 50)\r\n    };\r\n\r\n    componentDidMount(): void {\r\n        this.lessVolume();\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        clearTimeout(this.timer);\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <div className=\"volume\" style={{width: '200px', height: '20px', border: '1px solid #ddd'}}>\r\n                <div style={{height: '100%', width: this.state.volume + '%', background: 'green'}}></div>\r\n            </div>\r\n            <div>{this.state.volume}</div>\r\n            <div onClick={this.addVolume}>Add Volume\r\n            </div>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default KeepClick;","import React from \"react\";\r\nimport {number} from \"prop-types\";\r\nimport {findDOMNode} from \"react-dom\";\r\n\r\nimport '../css/components/Cursor.css'\r\n\r\nconst interface1 = {\r\n    volume: number\r\n};\r\n\r\nclass Cursor extends React.Component {\r\n    state: any;\r\n    timer: any;\r\n    move: any;\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            volume: 0,\r\n            left: 0\r\n        };\r\n        this.timer = null;\r\n        this.move = React.createRef();\r\n    }\r\n\r\n    addVolume = () => {\r\n        let {volume} = this.state;\r\n        let el = findDOMNode(this.move.current),\r\n            left = parseInt(window.getComputedStyle(el as Element).left as string);\r\n        console.log(left);\r\n        if (left > 90 && left < 110) {\r\n            this.setState({\r\n                volume: volume + 10 > 100 ? 100 : volume + 10\r\n            })\r\n        } else {\r\n            this.setState({\r\n                volume: 0\r\n            })\r\n        }\r\n    };\r\n\r\n    componentDidMount(): void {\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"cursor\">\r\n            <div className=\"volume\"\r\n                 style={{width: '20px', height: '200px', border: '1px solid #ddd', transform: 'rotate(180deg)'}}>\r\n                <div style={{background: 'blue', height: this.state.volume + '%', width: '100%'}}></div>\r\n            </div>\r\n            <div className=\"control\">\r\n                <div className=\"ruler\"\r\n                     style={{width: '200px', height: '20px', border: '1px solid #ddd', background: 'red'}}>\r\n                    <div className=\"highlight\" style={{width: '20px', height: '100%', background: 'green'}}></div>\r\n                </div>\r\n                <div className=\"move\" ref={this.move}\r\n                     style={{width: 0, height: 0, border: '20px solid', borderColor: 'transparent transparent black'}}>\r\n                </div>\r\n            </div>\r\n            <button onClick={this.addVolume}>Add Volume\r\n            </button>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Cursor;","import * as React from 'react';\r\nimport '../css/components/Hello.css'\r\nimport KeepClick from './KeepClick'\r\nimport Cursor from './Cursor'\r\n\r\nexport interface Props {\r\n    name: string,\r\n    enthusiasmLevel?: number,\r\n    onIncrease?: () => void,\r\n    onDecrease?: () => void\r\n}\r\n\r\nclass Hello2 extends React.Component<Props, object> {\r\n    render() {\r\n        const {name, enthusiasmLevel = 1} = this.props;\r\n\r\n        if (enthusiasmLevel <= 0) {\r\n            throw new Error('You could be a little enthusiasmLevel.')\r\n        }\r\n\r\n        return (\r\n            <div className=\"hello\">\r\n                <div className=\"greeting\">\r\n                    Hello {name + getExclamationMarks(enthusiasmLevel)}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction Hello({name, enthusiasmLevel = 1, onDecrease, onIncrease}: Props) {\r\n    if (enthusiasmLevel <= 0) {\r\n        throw new Error('You could be a little enthusiasmLevel.')\r\n    }\r\n    console.log(enthusiasmLevel);\r\n    return (\r\n        <div className=\"hello\">\r\n            <div className=\"greeting\">\r\n                Hello {name + getExclamationMarks(enthusiasmLevel)}\r\n            </div>\r\n            <div>\r\n                <button onClick={onDecrease}>-</button>\r\n                <button onClick={onIncrease}>+</button>\r\n            </div>\r\n            <KeepClick />\r\n            <Cursor />\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction getExclamationMarks(number: number) {\r\n    return Array(number + 1).join(\"!\");\r\n}\r\n\r\nexport default Hello;","\r\n\r\nexport const INCREMENT_ENTHUSIASM = 'INCREMENT_ENTHUSIASM';\r\nexport type INCREMENT_ENTHUSIASM = typeof INCREMENT_ENTHUSIASM;\r\nexport const DECREMENT_ENTHUSIASM = 'DECREMENT_ENTHUSIASM';\r\nexport type DECREMENT_ENTHUSIASM = typeof DECREMENT_ENTHUSIASM;","import * as constants from '../constants'\r\n\r\nexport interface IncrementEnthusiasm {\r\n    type: constants.INCREMENT_ENTHUSIASM;\r\n}\r\n\r\nexport interface DecrementEnthusiasm {\r\n    type: constants.DECREMENT_ENTHUSIASM;\r\n}\r\n\r\nexport type EnthusiasmAction = IncrementEnthusiasm | DecrementEnthusiasm;\r\n\r\nexport const incrementEnthusiasm = (): IncrementEnthusiasm => ({\r\n    type: constants.INCREMENT_ENTHUSIASM\r\n});\r\n\r\nexport const decrementEnthusiasm = (): DecrementEnthusiasm => ({\r\n    type: constants.DECREMENT_ENTHUSIASM\r\n});","import Hello from '../components/Hello';\r\nimport * as actions from '../actions/';\r\nimport {StoreState} from '../types/index';\r\nimport {connect} from 'react-redux';\r\nimport {Dispatch} from 'redux';\r\n\r\nexport function mapStateToprops({enthusiasmLevel, languageName}: StoreState) {\r\n    return {\r\n        name: languageName,\r\n        enthusiasmLevel\r\n    }\r\n}\r\n\r\nexport function mapDispatchToProps(dispatch: Dispatch) {\r\n    return {\r\n        onDecrease: () => dispatch(actions.decrementEnthusiasm()),\r\n        onIncrease: () => dispatch(actions.incrementEnthusiasm())\r\n    }\r\n}\r\n\r\n// const mapDispatchToProps = (dispatch: Dispatch) => ({\r\n//     onDecrease: () => dispatch(actions.decrementEnthusiasm()),\r\n//     onIncrease: () => dispatch(actions.incrementEnthusiasm())\r\n// })\r\n\r\nexport default connect(mapStateToprops, mapDispatchToProps)(Hello);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Hello from './containers/Hello';\nimport * as serviceWorker from './serviceWorker';\nimport {composeWithDevTools} from 'redux-devtools-extension'\n\nimport {createStore} from 'redux';\nimport {StoreState} from './types'\nimport {EnthusiasmAction} from './actions'\nimport enthusiasm from './reducers'\nimport {Provider} from 'react-redux'\n\nconst store = createStore(enthusiasm, composeWithDevTools());\n\nReactDOM.render(\n    <Provider store={store}>\n        <Hello/>\n    </Provider>,\n    document.getElementById('root') as HTMLElement\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import {EnthusiasmAction} from '../actions';\r\nimport {INCREMENT_ENTHUSIASM, DECREMENT_ENTHUSIASM} from '../constants';\r\nimport {StoreState} from '../types';\r\n\r\nexport default function enthusiasm(state: StoreState = {\r\n    languageName: 'TS',\r\n    enthusiasmLevel: 1\r\n}, action: EnthusiasmAction): StoreState {\r\n    console.log(1);\r\n    switch (action.type) {\r\n        case INCREMENT_ENTHUSIASM:\r\n            return {\r\n                ...state,\r\n                enthusiasmLevel: state.enthusiasmLevel + 1\r\n            };\r\n        case DECREMENT_ENTHUSIASM:\r\n            return {\r\n                ...state,\r\n                enthusiasmLevel: state.enthusiasmLevel - 1\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}"],"sourceRoot":""}